As an expert in prompt generation for MERN stack web development, generate a complete, functional Personal Finance Dashboard website. The website should include the following core features:

1.  **User Authentication:** Implement secure user registration and login functionality. Store user credentials securely using password hashing.

2.  **Data Entry:**
    * Allow users to input their income sources (with fields for description, amount, and date).
    * Allow users to input their expenses (with fields for description, amount, date, and category - e.g., food, transport, bills).
    * Allow users to input their assets (with fields for name and value).
    * Allow users to input their debts (with fields for name and outstanding balance).

3.  **Dashboard Display:**
    * Display the user's current net worth (calculated as total assets minus total debts).
    * Show a summary of total income and total expenses for the current month.
    * Present a basic visualization of spending by category (e.g., a simple bar chart or pie chart).
    * Display a list of recent transactions (income and expenses).

4.  **Technology Stack:** Utilize the MERN stack:
    * **Frontend:** React.js with functional components and hooks. Implement basic styling (no need for complex UI libraries unless deemed essential by the AI for basic readability).
    * **Backend:** Node.js and Express.js for the API.
    * **Database:** MongoDB for data storage. Use Mongoose for schema definition and interaction.

5.  **Code Structure:** Organize the code into logical folders for backend (models, routes, controllers, server) and frontend (components, pages).

6.  **Functionality:** Ensure all data input forms correctly update the database. The dashboard should dynamically reflect changes in the stored data.

7.  **Replit Compatibility:** Generate code that is well-structured and easily runnable within the Replit environment, including necessary `package.json` files for both the frontend and backend. Provide clear instructions or comments within the code where necessary for running the application (e.g., starting the backend and frontend servers).

**Constraints and Considerations for Replit AI:**

* Focus on core functionality over advanced UI/UX.
* Keep the styling minimal and functional for demonstration purposes.
* Prioritize clear and concise code that is easy to understand.
* Assume a basic understanding of MERN stack concepts by the user.
* Generate all necessary files and code to run the application.

**Expected Output:**

Generate a set of files and code that, when run in Replit, will provide a working Personal Finance Dashboard with the described features. Include any necessary setup instructions or commands within the generated code or as comments.